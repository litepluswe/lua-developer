script_name("NuboRP Rvanka Pro")
script_author("KABURA 2.0")
script_version("1.0.0")
script_dependencies("encoding", "lib.samp.events")

local encoding = require('encoding')
encoding.default = 'CP1251'
local u8 = encoding.UTF8

local imgui = require('mimgui')
local sampev = require('lib.samp.events')
local ffi = require('ffi')

-- ========== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ==========
local config = {
    rvanka = {
        enabled = false,
        target_id = -1,
        distance = 50.0,
        power = {x = 100.0, y = 0.0, z = 50.0},
        duration = 3.0,
        auto_target = false
    },
    bypass = {
        enabled = true,
        fake_ping = false,
        anti_detection = true
    },
    ui = {
        show_main = false,
        current_tab = 1,
        generating = false,
        last_action = ""
    }
}

-- ========== IMGUI –ü–ï–†–ï–ú–ï–ù–ù–´–ï ==========
local main_window = imgui.new.bool()
local target_id_input = imgui.new.char[32]()
local power_x = imgui.new.float(config.rvanka.power.x)
local power_y = imgui.new.float(config.rvanka.power.y)
local power_z = imgui.new.float(config.rvanka.power.z)
local distance_slider = imgui.new.float(config.rvanka.distance)
local duration_slider = imgui.new.float(config.rvanka.duration)
local auto_target_checkbox = imgui.new.bool(config.rvanka.auto_target)
local bypass_enabled = imgui.new.bool(config.bypass.enabled)
local fake_ping_checkbox = imgui.new.bool(config.bypass.fake_ping)

-- ========== –¶–í–ï–¢–ê –ò –°–¢–ò–õ–ò ==========
local colors = {
    main_bg = imgui.ImVec4(0.1, 0.1, 0.1, 0.95),
    header = imgui.ImVec4(0.2, 0.2, 0.2, 1.0),
    button = imgui.ImVec4(0.3, 0.3, 0.3, 1.0),
    button_hovered = imgui.ImVec4(0.4, 0.4, 0.4, 1.0),
    button_active = imgui.ImVec4(0.5, 0.5, 0.5, 1.0),
    accent = imgui.ImVec4(0.9, 0.3, 0.3, 1.0),
    success = imgui.ImVec4(0.3, 0.9, 0.3, 1.0),
    warning = imgui.ImVec4(0.9, 0.9, 0.3, 1.0),
    text = imgui.ImVec4(1.0, 1.0, 1.0, 1.0)
}

-- ========== –£–¢–ò–õ–ò–¢–´ ==========
local function log(message, color)
    color = color or 0x00BFFF
    sampAddChatMessage(string.format("{%06X}[NuboRP Rvanka] {FFFFFF}%s", color, message), -1)
end

local function getPlayerDistance(id)
    if not sampIsPlayerConnected(id) then return 999999 end
    
    local myX, myY, myZ = getCharCoordinates(PLAYER_PED)
    local targetX, targetY, targetZ = sampGetPlayerPos(id)
    
    if not targetX then return 999999 end
    
    return math.sqrt((myX - targetX)^2 + (myY - targetY)^2 + (myZ - targetZ)^2)
end

local function isPlayerInVehicle(id)
    if not sampIsPlayerConnected(id) then return false end
    return sampIsPlayerInAnyVehicle(id)
end

local function findNearestPlayer()
    local nearest_id = -1
    local nearest_distance = 999999
    
    for i = 0, sampGetMaxPlayerId() do
        if sampIsPlayerConnected(i) and i ~= select(2, sampGetPlayerIdByCharHandle(PLAYER_PED)) then
            local distance = getPlayerDistance(i)
            if distance < nearest_distance and isPlayerInVehicle(i) then
                nearest_distance = distance
                nearest_id = i
            end
        end
    end
    
    return nearest_id, nearest_distance
end

-- ========== –ê–ù–¢–ò-–ß–ò–¢ –û–ë–•–û–î ==========
local bypass_functions = {
    -- –û–±—Ö–æ–¥ –¥–µ—Ç–µ–∫—Ü–∏–∏ –ø–∞–∫–µ—Ç–æ–≤
    packet_spoof = function()
        if not config.bypass.enabled then return end
        
        -- –ò–º–∏—Ç–∞—Ü–∏—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
        lua_thread.create(function()
            wait(math.random(50, 150))
            -- –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–µ–π–∫–æ–≤—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏
            if config.bypass.fake_ping then
                sampSendChat("/ping")
            end
        end)
    end,
    
    -- –ê–Ω—Ç–∏-–¥–µ—Ç–µ–∫—Ü–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    speed_limit = function()
        if not config.bypass.anti_detection then return end
        
        -- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥
        local last_command_time = 0
        local current_time = os.clock()
        
        if current_time - last_command_time < 1.0 then
            return false
        end
        
        last_command_time = current_time
        return true
    end,
    
    -- –†–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏–π
    randomize_behavior = function()
        -- –°–ª—É—á–∞–π–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
        wait(math.random(100, 500))
        
        -- –°–ª—É—á–∞–π–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏ (–∏–º–∏—Ç–∞—Ü–∏—è)
        local random_actions = {
            function() sampSendChat("/time") end,
            function() sampSendChat("/stats") end,
            function() end -- –ü—É—Å—Ç–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        }
        
        if math.random(1, 10) == 1 then
            random_actions[math.random(1, #random_actions)]()
        end
    end
}

-- ========== –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –†–í–ê–ù–ö–ò ==========
local function executeRvanka(target_id)
    if not sampIsPlayerConnected(target_id) then
        log("–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!", 0xFF0000)
        return false
    end
    
    local distance = getPlayerDistance(target_id)
    if distance > config.rvanka.distance then
        log(string.format("–ò–≥—Ä–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ! –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: %.1f –º", distance), 0xFFFF00)
        return false
    end
    
    if not isPlayerInVehicle(target_id) then
        log("–ò–≥—Ä–æ–∫ –Ω–µ –≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ!", 0xFFFF00)
        return false
    end
    
    -- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω—Ç–∏-—á–∏—Ç –æ–±—Ö–æ–¥–∞
    if not bypass_functions.speed_limit() then
        log("–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ! –ü–æ–¥–æ–∂–¥–∏—Ç–µ...", 0xFFFF00)
        return false
    end
    
    config.ui.generating = true
    config.ui.last_action = "Generating response..."
    
    lua_thread.create(function()
        -- –ê–Ω—Ç–∏-—á–∏—Ç –æ–±—Ö–æ–¥
        bypass_functions.packet_spoof()
        bypass_functions.randomize_behavior()
        
        wait(math.random(500, 1500)) -- –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        
        -- –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–≤–∞–Ω–∫–∏
        local player_name = sampGetPlayerNickname(target_id)
        log(string.format("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–≤–∞–Ω–∫–∞ –Ω–∞ %s [ID: %d]", player_name, target_id), 0x00FF00)
        
        -- –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞–∫–µ—Ç–æ–≤ —Ä–≤–∞–Ω–∫–∏ (–∏–º–∏—Ç–∞—Ü–∏—è)
        for i = 1, math.floor(config.rvanka.duration) do
            if not sampIsPlayerConnected(target_id) then break end
            
            -- –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–≤–∞–Ω–∫–∏
            -- –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–µ–π–∫–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
            sampSendChat(string.format("/me —Ç–æ–ª–∫–∞–µ—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∏–≥—Ä–æ–∫–∞ %s", player_name))
            wait(1000)
        end
        
        config.ui.generating = false
        config.ui.last_action = string.format("–†–≤–∞–Ω–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞ %s", player_name)
        log("–†–≤–∞–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", 0x00FF00)
    end)
    
    return true
end

-- ========== IMGUI –ò–ù–¢–ï–†–§–ï–ô–° ==========
local function drawMainWindow()
    if not main_window[0] then return end
    
    imgui.SetNextWindowSize(imgui.ImVec2(500, 400), imgui.Cond.FirstUseEver)
    imgui.SetNextWindowPos(imgui.ImVec2(100, 100), imgui.Cond.FirstUseEver)
    
    imgui.PushStyleColor(imgui.Col.WindowBg, colors.main_bg)
    imgui.PushStyleColor(imgui.Col.Header, colors.header)
    imgui.PushStyleColor(imgui.Col.Button, colors.button)
    imgui.PushStyleColor(imgui.Col.ButtonHovered, colors.button_hovered)
    imgui.PushStyleColor(imgui.Col.ButtonActive, colors.button_active)
    
    if imgui.Begin(u8"üêπ NuboRP Rvanka Pro v1.0", main_window, imgui.WindowFlags.NoResize) then
        
        -- –õ–æ–≥–æ—Ç–∏–ø —Ö–æ–º—è–∫–∞
        imgui.SetCursorPosX((imgui.GetWindowWidth() - 100) / 2)
        imgui.Text(u8"üêπ")
        imgui.SameLine()
        imgui.TextColored(colors.accent, u8"KABURA 2.0")
        imgui.Separator()
        
        -- –°—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        if config.ui.generating then
            imgui.TextColored(colors.warning, u8"‚è≥ " .. config.ui.last_action)
            imgui.ProgressBar(-1.0 * imgui.GetTime(), imgui.ImVec2(-1, 0), u8"Generating response...")
        else
            if config.ui.last_action ~= "" then
                imgui.TextColored(colors.success, u8"‚úÖ " .. config.ui.last_action)
            end
        end
        
        imgui.Separator()
        
        -- –í–∫–ª–∞–¥–∫–∏
        if imgui.BeginTabBar(u8"MainTabs") then
            
            -- –í–∫–ª–∞–¥–∫–∞ "–†–≤–∞–Ω–∫–∞"
            if imgui.BeginTabItem(u8"üöó –†–≤–∞–Ω–∫–∞") then
                imgui.Spacing()
                
                imgui.Text(u8"ID —Ü–µ–ª–∏:")
                imgui.SameLine()
                imgui.SetNextItemWidth(100)
                imgui.InputText(u8"##target_id", target_id_input, 32)
                
                imgui.SameLine()
                if imgui.Button(u8"üéØ –ù–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–µ–≥–æ") then
                    local nearest_id, distance = findNearestPlayer()
                    if nearest_id ~= -1 then
                        ffi.copy(target_id_input, tostring(nearest_id))
                        log(string.format("–ù–∞–π–¥–µ–Ω –∏–≥—Ä–æ–∫ ID: %d (%.1f –º)", nearest_id, distance), 0x00FF00)
                    else
                        log("–ò–≥—Ä–æ–∫–∏ –≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!", 0xFFFF00)
                    end
                end
                
                imgui.Spacing()
                imgui.Text(u8"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–ª—ã:")
                imgui.SliderFloat(u8"–°–∏–ª–∞ X", power_x, 0.0, 200.0, u8"%.1f")
                imgui.SliderFloat(u8"–°–∏–ª–∞ Y", power_y, 0.0, 200.0, u8"%.1f")
                imgui.SliderFloat(u8"–°–∏–ª–∞ Z", power_z, 0.0, 200.0, u8"%.1f")
                
                imgui.Spacing()
                imgui.SliderFloat(u8"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è", distance_slider, 10.0, 100.0, u8"%.1f –º")
                imgui.SliderFloat(u8"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", duration_slider, 1.0, 10.0, u8"%.1f —Å–µ–∫")
                
                imgui.Spacing()
                imgui.Checkbox(u8"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Ü–µ–ª–∏", auto_target_checkbox)
                
                imgui.Spacing()
                imgui.Separator()
                
                -- –ö–Ω–æ–ø–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                local button_color = config.ui.generating and colors.warning or colors.accent
                imgui.PushStyleColor(imgui.Col.Button, button_color)
                
                if imgui.Button(u8"üöÄ –í–´–ü–û–õ–ù–ò–¢–¨ –†–í–ê–ù–ö–£", imgui.ImVec2(-1, 40)) then
                    if not config.ui.generating then
                        local target_id = tonumber(ffi.string(target_id_input))
                        if target_id and target_id >= 0 and target_id <= sampGetMaxPlayerId() then
                            config.rvanka.target_id = target_id
                            config.rvanka.power.x = power_x[0]
                            config.rvanka.power.y = power_y[0]
                            config.rvanka.power.z = power_z[0]
                            config.rvanka.distance = distance_slider[0]
                            config.rvanka.duration = duration_slider[0]
                            
                            executeRvanka(target_id)
                        else
                            log("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∏–≥—Ä–æ–∫–∞!", 0xFF0000)
                        end
                    end
                end
                
                imgui.PopStyleColor()
                imgui.EndTabItem()
            end
            
            -- –í–∫–ª–∞–¥–∫–∞ "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
            if imgui.BeginTabItem(u8"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è") then
                imgui.Spacing()
                
                imgui.TextColored(colors.accent, u8"NuboRP Rvanka Pro v1.0")
                imgui.Text(u8"–ê–≤—Ç–æ—Ä: KABURA 2.0")
                imgui.Text(u8"–ü–æ–¥–¥–µ—Ä–∂–∫–∞: NuboRP —Å–µ—Ä–≤–µ—Ä—ã")
                
                imgui.Spacing()
                imgui.Separator()
                imgui.Spacing()
                
                imgui.Text(u8"üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:")
                imgui.BulletText(u8"–í–≤–µ–¥–∏—Ç–µ ID –∏–≥—Ä–æ–∫–∞ –∏–ª–∏ –Ω–∞–π–¥–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
                imgui.BulletText(u8"–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–∏–ª—É –∏ –¥–∏—Å—Ç–∞–Ω—Ü–∏—é —Ä–≤–∞–Ω–∫–∏")
                imgui.BulletText(u8"–ü–æ–¥–æ–π–¥–∏—Ç–µ –∫ —Ü–µ–ª–∏ –Ω–∞ –Ω—É–∂–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ")
                imgui.BulletText(u8"–ù–∞–∂–º–∏—Ç–µ '–í–´–ü–û–õ–ù–ò–¢–¨ –†–í–ê–ù–ö–£'")
                
                imgui.Spacing()
                imgui.Separator()
                imgui.Spacing()
                
                imgui.TextColored(colors.warning, u8"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ:")
                imgui.TextWrapped(u8"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞ —Å–≤–æ–π —Å—Ç—Ä–∞—Ö –∏ —Ä–∏—Å–∫. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤ –º–æ–∂–µ—Ç –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Å–∞–Ω–∫—Ü–∏–∏ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ–¥–æ–±–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤.")
                
                imgui.EndTabItem()
            end
            
            -- –í–∫–ª–∞–¥–∫–∞ "–¢—É–ª—Å—ã"
            if imgui.BeginTabItem(u8"üîß –¢—É–ª—Å—ã") then
                imgui.Spacing()
                
                imgui.TextColored(colors.accent, u8"–ê–Ω—Ç–∏-—á–∏—Ç –æ–±—Ö–æ–¥:")
                imgui.Checkbox(u8"–í–∫–ª—é—á–∏—Ç—å –æ–±—Ö–æ–¥", bypass_enabled)
                imgui.Checkbox(u8"–§–µ–π–∫–æ–≤—ã–π –ø–∏–Ω–≥", fake_ping_checkbox)
                
                if bypass_enabled[0] then
                    imgui.TextColored(colors.success, u8"‚úÖ –û–±—Ö–æ–¥ –∞–∫—Ç–∏–≤–µ–Ω")
                else
                    imgui.TextColored(colors.warning, u8"‚ö†Ô∏è –û–±—Ö–æ–¥ –æ—Ç–∫–ª—é—á–µ–Ω")
                end
                
                imgui.Spacing()
                imgui.Separator()
                imgui.Spacing()
                
                imgui.Text(u8"üõ†Ô∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:")
                
                if imgui.Button(u8"üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥", imgui.ImVec2(-1, 30)) then
                    log("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞", 0x00FF00)
                end
                
                if imgui.Button(u8"üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", imgui.ImVec2(-1, 30)) then
                    local online = sampGetMaxPlayerId()
                    local my_id = select(2, sampGetPlayerIdByCharHandle(PLAYER_PED))
                    log(string.format("–û–Ω–ª–∞–π–Ω: %d | –ú–æ–π ID: %d", online, my_id), 0x00BFFF)
                end
                
                if imgui.Button(u8"üßπ –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç", imgui.ImVec2(-1, 30)) then
                    for i = 1, 10 do
                        sampAddChatMessage(" ", -1)
                    end
                end
                
                imgui.EndTabItem()
            end
            
            imgui.EndTabBar()
        end
        
        imgui.End()
    end
    
    imgui.PopStyleColor(5)
end

-- ========== –ö–û–ú–ê–ù–î–´ ==========
function cmd_rvanka()
    main_window[0] = not main_window[0]
    config.ui.show_main = main_window[0]
end

-- ========== –°–û–ë–´–¢–ò–Ø ==========
function sampev.onSendChat(message)
    -- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    if message:find("/") then
        config.ui.last_action = "–ö–æ–º–∞–Ω–¥–∞: " .. message
    end
end

function sampev.onServerMessage(color, text)
    -- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω—Ç–∏-—á–∏—Ç –æ–±—Ö–æ–¥–∞
    if text:find("–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω") or text:find("—á–∏—Ç–µ—Ä") or text:find("–±–∞–Ω") then
        if config.bypass.enabled then
            bypass_functions.randomize_behavior()
        end
    end
end

-- ========== –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ ==========
function main()
    while not isSampAvailable() do wait(0) end
    
    log("üêπ NuboRP Rvanka Pro –∑–∞–≥—Ä—É–∂–µ–Ω!", 0x00FF00)
    log("–ö–æ–º–∞–Ω–¥–∞: /rvanka", 0x00BFFF)
    log("–ê–≤—Ç–æ—Ä: KABURA 2.0", 0xFFFF00)
    
    sampRegisterChatCommand("rvanka", cmd_rvanka)
    
    -- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    lua_thread.create(function()
        while true do
            wait(100)
            
            config.bypass.enabled = bypass_enabled[0]
            config.bypass.fake_ping = fake_ping_checkbox[0]
            config.rvanka.auto_target = auto_target_checkbox[0]
            
            -- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Ü–µ–ª–∏
            if config.rvanka.auto_target and main_window[0] then
                local nearest_id, distance = findNearestPlayer()
                if nearest_id ~= -1 and distance <= config.rvanka.distance then
                    ffi.copy(target_id_input, tostring(nearest_id))
                end
            end
        end
    end)
    
    -- –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª ImGui
    while true do
        wait(0)
        drawMainWindow()
    end
end

function onScriptTerminate(script, quit)
    if script == thisScript() then
        log("üêπ NuboRP Rvanka Pro –≤—ã–≥—Ä—É–∂–µ–Ω", 0xFFFF00)
    end
end